Time complexity of builtin method of array.sort() takes O(nlongn)

Optimizing it : O(n+10) ~ O(n)

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>This code only works for elements ranging within 10.

import java.util.*;
public class Main
{
	public static void main(String[] args) {
		int[] array = {6,5,3,2,1,1};
		System.out.println(Arrays.toString(array));   //takes TC : O(nlogn)
		//Let's do it by count freqeuncy Sort
		int[] freq = new int[9];
		Arrays.fill(freq,0);
		System.out.println(Arrays.toString(freq));
		int n = array.length;
		//int m = Arrays.stream(array).max().getAsInt();            //Retrieving maximum of element
		for(int i = 0;i<n;i++){
		    freq[array[i]]+=1;
		}
		//printing the array in sorted Order
		
		for(int i=0;i<9;i++){
		    int j = freq[i];
		    while(j>0){
		        System.out.print(i+ " ");
		        j--;
		    }		}
	}
}
